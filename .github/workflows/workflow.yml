name: CI/CD

on:
  push:
    branches: ["main_LMS"]
  pull_request:
    branches: ["main_LMS"]

env:
  AWS_REGION: ap-northeast-2                   # AWS 리전 설정
  ECR_REPOSITORY: deploy/lms              # Amazon ECR 리포지토리 이름
  ECS_SERVICE: SERVICE-LMS-ECS                   # Amazon ECS 서비스 이름
  ECS_CLUSTER: ECS-CLUSTER-LMS                   # Amazon ECS 클러스터 이름
  ECS_TASK_DEFINITION: .aws/task-definition.json # Amazon ECS 태스크 정의 파일 경로
  CONTAINER_NAME: backend                   # 태스크 정의의 컨테이너 이름

permissions:
  contents: read

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}  # GitHub Secrets에서 가져온 환경 변수
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # GitHub Secrets에서 가져온 환경 변수
          POSTGRES_DB: lms
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin" # Alternative distribution options are available
      - name: chmod gradlew
        run: chmod +x ./gradlew
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/lms?characterEncoding=UTF-8
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # GitHub Secrets에서 가져온 환경 변수
          AWS_COGNITO_USER_POOL_ID: ${{ secrets.AWS_COGNITO_USER_POOL_ID }}
          AWS_COGNITO_REGION: ${{ secrets.AWS_COGNITO_REGION }}
        run: |
          ./gradlew build sonar -Dsonar.qualitygate.wait=true --info

      - name: Checkout sesac-lms-jar repository
        uses: actions/checkout@v4
        with:
          repository: SesacMegazoneLMS/sesac-lms-jar  # 대상 리포지토리
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # 비공식 리포지토리에 접근하기 위한 토큰
          path: sesac-lms-jar  # 체크아웃할 경로

      - name: Upload JAR to GitHub Repository
        run: |
          cp build/libs/*.jar sesac-lms-jar/  # JAR 파일을 다른 리포지토리로 복사
          cd sesac-lms-jar
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Add built JAR file"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/SesacMegazoneLMS/sesac-lms-jar.git main_LMS  # main_LMS 브랜치에 푸시

  docker:
    name: Push Docker Hub
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Docker Hub repository
        uses: actions/checkout@v4
        with:
          repository: SesacMegazoneLMS/sesac-lms-jar
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # GitHub Secrets에서 가져온 토큰

      - name: Build Docker image
        run: |
          docker build -t shindongjin/sesac-lms-image:latest .  # Dockerfile이 있는 경로에서 빌드

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker push shindongjin/sesac-lms-image:latest  # Docker Hub에 push

  deploy:
    name: Deploy Amazon ECS
    runs-on: ubuntu-latest
    needs: docker
    environment: production

    steps:
    - name: Checkout Docker Hub repository
      uses: actions/checkout@v4
      with:
        repository: SesacMegazoneLMS/sesac-lms-jar
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # GitHub Secrets에서 가져온 토큰

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Docker 이미지를 빌드하고 ECR에 푸시
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
