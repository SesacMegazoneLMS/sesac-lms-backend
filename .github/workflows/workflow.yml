name: CI/CD

on:
  push:
    branches: ["main_LMS", "develop"]
  pull_request:
    branches: ["main_LMS", "develop"]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}  # GitHub Secrets에서 가져온 환경 변수
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # GitHub Secrets에서 가져온 환경 변수
          POSTGRES_DB: lms
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin" # Alternative distribution options are available
      - name: chmod gradlew
        run: chmod +x ./gradlew
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/lms?characterEncoding=UTF-8
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # GitHub Secrets에서 가져온 환경 변수
        run: |
          ./gradlew build sonar -Dsonar.qualitygate.wait=true --info

      - name: Checkout sesac-lms-jar repository
        uses: actions/checkout@v4
        with:
          repository: SesacMegazoneLMS/sesac-lms-jar  # 대상 리포지토리
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # 비공식 리포지토리에 접근하기 위한 토큰
          path: sesac-lms-jar  # 체크아웃할 경로

      - name: Upload JAR to GitHub Repository
        run: |
          cp build/libs/*.jar sesac-lms-jar/  # JAR 파일을 다른 리포지토리로 복사
          cd sesac-lms-jar
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Add built JAR file"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/SesacMegazoneLMS/sesac-lms-jar.git main_LMS  # main_LMS 브랜치에 푸시

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Docker Hub repository
        uses: actions/checkout@v4
        with:
          repository: shindongjin/sesac-lms-image  # Docker Hub 리포지토리
          token: ${{ secrets.GITHUB_TOKEN }}  # GitHub Secrets에서 가져온 토큰

      - name: Build Docker image
        run: |
          docker build -t shindongjin/sesac-lms-image:latest .  # Dockerfile이 있는 경로에서 빌드

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker push shindongjin/sesac-lms-image:latest  # Docker Hub에 푸시
