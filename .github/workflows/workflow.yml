name: CI/CD

on:
  push:
    branches: ["main_LMS", "develop"]
  pull_request:
    branches: ["main_LMS", "develop"]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}  # GitHub Secrets에서 가져온 환경 변수
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # GitHub Secrets에서 가져온 환경 변수
          POSTGRES_DB: lms
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin" # Alternative distribution options are available
      - name: chmod gradlew
        run: chmod +x ./gradlew
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/lms?characterEncoding=UTF-8
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}  # GitHub Secrets에서 가져온 환경 변수
        run: |
          ./gradlew build sonar -Dsonar.qualitygate.wait=true --info
